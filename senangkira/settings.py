"""
Django settings for senangkira project.

Generated by Django 4.2.x, but configured for SenangKira invoice/quote system.
"""

import os
from pathlib import Path
from urllib.parse import urlparse

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-dev-key-replace-in-production'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', '0.0.0.0']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third-party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',  # JWT blacklist functionality
    'corsheaders',
    'django_filters',  # For advanced filtering
    'django_celery_beat',  # Celery beat scheduler
    
    # Local apps
    'authentication',
    'clients',
    'invoicing', 
    'expenses',
    'dashboard',
    'reminders',
    'monitoring',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Custom middleware
    'senangkira.middleware.tenant_isolation.TenantIsolationMiddleware',
    'senangkira.middleware.tenant_isolation.APIResponseMiddleware',
]

ROOT_URLCONF = 'senangkira.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'senangkira.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Parse DATABASE_URL from env.md
DATABASE_URL = "postgresql://padux:passwordrahsia@192.168.31.117:5432/senangkira?schema=public"
db_url = urlparse(DATABASE_URL)

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': db_url.path[1:],  # Remove leading slash
        'USER': db_url.username,
        'PASSWORD': db_url.password,
        'HOST': db_url.hostname,
        'PORT': db_url.port,
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files (user uploads)
MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model (will be created in authentication app)
AUTH_USER_MODEL = 'authentication.User'

# Django REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
}

# JWT Configuration
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    
    # Custom serializer with additional claims
    'TOKEN_OBTAIN_SERIALIZER': 'authentication.serializers.SenangKiraTokenObtainPairSerializer',
    
    # Security settings
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
}

# CORS Configuration (for frontend integration)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React dev server
    "http://127.0.0.1:3000",
]

CORS_ALLOW_CREDENTIALS = True

# Celery Configuration (for background tasks)
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/1'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# Celery Worker Configuration
CELERY_TASK_ACKS_LATE = True
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_TASK_REJECT_ON_WORKER_LOST = True

# Celery Redis Configuration
CELERY_REDIS_MAX_CONNECTIONS = 20
CELERY_REDIS_RETRY_ON_TIMEOUT = True

# Celery Queue Configuration
CELERY_TASK_ROUTES = {
    # Dashboard tasks
    'dashboard.tasks.refresh_dashboard_cache': {'queue': 'high_priority'},
    'dashboard.tasks.warm_dashboard_cache': {'queue': 'cache_operations'},
    'dashboard.tasks.export_dashboard_data': {'queue': 'low_priority'},
    'dashboard.tasks.performance_analysis': {'queue': 'analytics'},
    'dashboard.tasks.send_notification': {'queue': 'high_priority'},
    'dashboard.tasks.cleanup_old_data': {'queue': 'low_priority'},
    
    # Reminder tasks
    'reminders.tasks.process_daily_reminders': {'queue': 'high_priority'},
    'reminders.tasks.send_single_reminder': {'queue': 'reminders'},
    'reminders.tasks.cleanup_old_reminders': {'queue': 'low_priority'},
    'reminders.tasks.generate_reminder_preview': {'queue': 'analytics'},
    'reminders.tasks.send_reminder_statistics_email': {'queue': 'reminders'},
    
    # Additional reminder tasks
    'reminders.tasks_additional.send_weekly_reminder_statistics': {'queue': 'analytics'},
    'reminders.tasks_additional.process_overdue_invoice_escalation': {'queue': 'high_priority'},
    'reminders.tasks_additional.process_weekend_batch_reminders': {'queue': 'high_priority'},
    'reminders.tasks_additional.send_monthly_reminder_summary': {'queue': 'analytics'},
}

# Celery Beat Configuration (Periodic Tasks)
from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    # Dashboard tasks
    'refresh-dashboard-cache-hourly': {
        'task': 'dashboard.tasks.refresh_dashboard_cache',
        'schedule': 3600.0,  # Every hour
        'options': {'queue': 'high_priority'}
    },
    'warm-dashboard-cache-daily': {
        'task': 'dashboard.tasks.warm_dashboard_cache',
        'schedule': 86400.0,  # Daily
        'options': {'queue': 'cache_operations'}
    },
    'performance-analysis-every-6-hours': {
        'task': 'dashboard.tasks.performance_analysis',
        'schedule': 21600.0,  # Every 6 hours
        'options': {'queue': 'analytics'}
    },
    
    # Email reminder tasks
    'process-daily-reminders': {
        'task': 'reminders.tasks.process_daily_reminders',
        'schedule': crontab(hour=9, minute=0),  # Daily at 9:00 AM
        'options': {'queue': 'high_priority'},
        'kwargs': {}  # Uses current date by default
    },
    
    'process-evening-reminders': {
        'task': 'reminders.tasks.process_daily_reminders',
        'schedule': crontab(hour=17, minute=0),  # Daily at 5:00 PM
        'options': {'queue': 'high_priority'},
        'kwargs': {}  # Second daily run for better coverage
    },
    
    'cleanup-old-reminder-records': {
        'task': 'reminders.tasks.cleanup_old_reminders',
        'schedule': crontab(hour=2, minute=0, day_of_week=1),  # Weekly on Monday at 2:00 AM
        'options': {'queue': 'low_priority'},
        'kwargs': {'days_to_keep': 90}  # Keep 90 days of reminder history
    },
    
    'send-weekly-reminder-stats': {
        'task': 'reminders.tasks_additional.send_weekly_reminder_statistics',
        'schedule': crontab(hour=8, minute=0, day_of_week=1),  # Weekly on Monday at 8:00 AM
        'options': {'queue': 'analytics'},
        'kwargs': {}
    },
    
    # Overdue invoice escalation tasks
    'escalation-level-1-overdue': {
        'task': 'reminders.tasks_additional.process_overdue_invoice_escalation',
        'schedule': crontab(hour=10, minute=0),  # Daily at 10:00 AM
        'options': {'queue': 'high_priority'},
        'kwargs': {'escalation_level': 1}  # First overdue reminder
    },
    
    'escalation-level-2-urgent': {
        'task': 'reminders.tasks_additional.process_overdue_invoice_escalation',
        'schedule': crontab(hour=11, minute=0),  # Daily at 11:00 AM
        'options': {'queue': 'high_priority'},
        'kwargs': {'escalation_level': 2}  # Urgent reminder (1 week overdue)
    },
    
    'escalation-level-3-final': {
        'task': 'reminders.tasks_additional.process_overdue_invoice_escalation',
        'schedule': crontab(hour=12, minute=0, day_of_week='1,3,5'),  # Mon/Wed/Fri at 12:00 PM
        'options': {'queue': 'high_priority'},
        'kwargs': {'escalation_level': 3}  # Final notice (2+ weeks overdue)
    },
    
    # Weekend and batch processing
    'weekend-batch-reminders': {
        'task': 'reminders.tasks_additional.process_weekend_batch_reminders',
        'schedule': crontab(hour=10, minute=0, day_of_week='6,0'),  # Saturday and Sunday at 10:00 AM
        'options': {'queue': 'high_priority'},
        'kwargs': {}
    },
    
    # Monthly summary
    'monthly-reminder-summary': {
        'task': 'reminders.tasks_additional.send_monthly_reminder_summary',
        'schedule': crontab(hour=9, minute=0, day_of_month=1),  # First day of month at 9:00 AM
        'options': {'queue': 'analytics'},
        'kwargs': {}
    },
}

# Email Configuration (for reminder emails)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.sendgrid.net'  # Replace with your email service
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = ''  # Set in production
EMAIL_HOST_PASSWORD = ''  # Set in production
DEFAULT_FROM_EMAIL = 'noreply@senangkira.com'

# Logging Configuration
import sys

# Create logs directory if it doesn't exist
logs_dir = BASE_DIR / 'logs'
os.makedirs(logs_dir, exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'verbose',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': logs_dir / 'django.log',
            'maxBytes': 1024*1024*10,  # 10MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'] if os.access(logs_dir, os.W_OK) else ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'senangkira': {
            'handlers': ['console', 'file'] if os.access(logs_dir, os.W_OK) else ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}