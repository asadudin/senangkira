version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: senangkira_db
    environment:
      POSTGRES_DB: senangkira
      POSTGRES_USER: padux
      POSTGRES_PASSWORD: passwordrahsia
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docs/schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U padux -d senangkira"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - senangkira_network

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: senangkira_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - senangkira_network

  # Django Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: senangkira_web
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://padux:passwordrahsia@db:5432/senangkira
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - REDIS_URL=redis://redis:6379/2
      - SECRET_KEY=django-production-secret-key-change-me
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,web
    ports:
      - "8000:8000"
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - senangkira_network

  # Celery Worker
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: senangkira_celery_worker
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://padux:passwordrahsia@db:5432/senangkira
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - SECRET_KEY=django-production-secret-key-change-me
    command: celery -A senangkira worker --loglevel=info --concurrency=2
    volumes:
      - media_volume:/app/media
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "-A", "senangkira", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - senangkira_network

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: senangkira_celery_beat
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://padux:passwordrahsia@db:5432/senangkira
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - SECRET_KEY=django-production-secret-key-change-me
    command: celery -A senangkira beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - senangkira_network

  # Celery Flower (Monitoring)
  celery-flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: senangkira_flower
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    command: celery -A senangkira flower --port=5555
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery-worker
    networks:
      - senangkira_network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: senangkira_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/var/www/static:ro
      - media_volume:/var/www/media:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - senangkira_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local

networks:
  senangkira_network:
    driver: bridge

# Development override
# Usage: docker-compose -f docker-compose.yaml -f docker-compose.dev.yaml up